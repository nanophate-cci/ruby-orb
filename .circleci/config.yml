---
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.1
  ruby:
    commands:
        install-deps:
            description: Install gems with Bundler.
            parameters:
                app-dir:
                    default: .
                    description: |
                        Path to the directory containing your Gemfile file. Not needed if Gemfile lives in the root.
                    type: string
                bundler-version:
                    default: ""
                    description: |
                        Configure which version of bundler to install and utilize. By default, it gets the bundler version from Gemfile.lock, but if it is not working use this to override.
                    type: string
                clean-bundle:
                    default: false
                    description: |
                        Run `bundle clean --force` after `bundle install` to clean Bundler before saving dependencies to cache. By default, it is set to false.
                    type: boolean
                gemfile:
                    default: Gemfile
                    description: Name of your Gemfile file.
                    type: string
                include-branch-in-cache-key:
                    default: true
                    description: |
                        If true, this cache bucket will only apply to jobs within the same branch.
                    type: boolean
                key:
                    default: gems-v1
                    description: The cache key to use. The key is immutable.
                    type: string
                override-cache-file:
                    default: ""
                    description: |
                        Specify an alternative file to use in the cache key
                    type: string
                path:
                    default: ./vendor/bundle
                    description: |
                        Installation path. By default, it will run bundle with `--deployment` flag and installs gems to the vendor/bundle directory.
                    type: string
                pre-install-steps:
                    default: []
                    description: |
                        Steps that will be executed between installing bundler, and running bundle install
                    type: steps
                with-cache:
                    default: true
                    description: Enable automatic caching of your gemfile dependencies for increased speed.
                    type: boolean
            steps:
                - when:
                    condition: <<parameters.with-cache>>
                    steps:
                        - run:
                            command: "#!/usr/bin/env bash\n\nTARGET_DIR=\"/tmp\"\nif [ -n \"$HOMEDRIVE\" ]; then\n    TARGET_DIR=\"$HOMEDRIVE\\\\tmp\"\nfi\n\n# Link corresponding lock file to a temporary file used by cache commands\nif [ -n \"$PARAM_OVERRIDE_LOCKFILE\" ] && [ -f \"$PARAM_OVERRIDE_LOCKFILE\" ]; then\n    echo \"Using $PARAM_OVERRIDE_LOCKFILE as lock file\"\n    cp \"$PARAM_OVERRIDE_LOCKFILE\" $TARGET_DIR/ruby-project-lockfile\nelif [[ \"$PARAM_GEMFILE\" == *.rb ]]; then\n    GEMS_LOCKED=\"${PARAM_GEMFILE%.rb}.locked\"\n\n    if [ -f \"$GEMS_LOCKED\" ]; then\n        echo \"Using $GEMS_LOCKED as lock file\"\n        cp \"$GEMS_LOCKED\" $TARGET_DIR/ruby-project-lockfile\n    else\n        echo \"Could not find $GEMS_LOCKED file\"\n    fi\nelif [ -f \"$PARAM_GEMFILE.lock\" ]; then\n    echo \"Using $PARAM_GEMFILE.lock as lock file\"\n    cp \"$PARAM_GEMFILE.lock\" $TARGET_DIR/ruby-project-lockfile\nelse \n    echo \"Unable to determine lock file for $PARAM_GEMFILE.\"\nfi\n"
                            environment:
                                PARAM_GEMFILE: << parameters.gemfile >>
                                PARAM_OVERRIDE_LOCKFILE: << parameters.override-cache-file >>
                            name: Determine lock file
                            working_directory: <<parameters.app-dir>>
                        - restore_cache:
                            keys:
                                - << parameters.key >>-{{ arch }}-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/ruby-project-lockfile"  }}
                                - << parameters.key >>-{{ arch }}-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>
                - run:
                    command: |
                        #!/usr/bin/env bash

                        TARGET_DIR="/tmp"
                        if [ -n "$HOMEDRIVE" ]; then
                            TARGET_DIR="$HOMEDRIVE\\tmp"
                        fi

                        if test -f "$TARGET_DIR/ruby-project-lockfile"; then
                          APP_BUNDLER_VERSION=$(cat "$TARGET_DIR/ruby-project-lockfile" | tail -1 | tr -d " ")
                          if [ -z "$APP_BUNDLER_VERSION" ]; then
                            echo "Could not find bundler version from lockfile. Please use bundler-version parameter"
                          else
                            echo "Lock file detected bundler version $APP_BUNDLER_VERSION"
                          fi
                        fi

                        if [ -n "$PARAM_BUNDLER_VERSION" ]; then
                          echo "Found bundler-version parameter to override"
                          APP_BUNDLER_VERSION="$PARAM_BUNDLER_VERSION"
                        fi

                        if ! bundle version | grep -q $APP_BUNDLER_VERSION; then
                          echo "Installing bundler $APP_BUNDLER_VERSION"
                          gem install bundler:$APP_BUNDLER_VERSION
                        else
                          echo "bundler $APP_BUNDLER_VERSION is already installed."
                        fi
                    environment:
                        PARAM_BUNDLER_VERSION: << parameters.bundler-version >>
                        PARAM_GEMFILE: << parameters.gemfile >>
                    name: Install Bundler
                    working_directory: <<parameters.app-dir>>
                - steps: << parameters.pre-install-steps >>
                - run:
                    command: |
                        #!/usr/bin/env bash

                        if bundle config set > /dev/null 2>&1; then
                          if [ "$PARAM_PATH" == "./vendor/bundle" ]; then
                            bundle config deployment 'true'
                          fi
                          bundle config gemfile "$PARAM_GEMFILE"
                          bundle config path "$PARAM_PATH"

                          if [ -d "$HOME/.rvm/usr/ssl" ]; then
                            echo "Detected rvm ssl version. Configuring bundle package with openssl dir $HOME/.rvm/usr."
                            bundle config build.openssl --with-openssl-dir="$HOME/.rvm/usr"
                          fi
                        else
                          if [ "$PARAM_PATH" == "./vendor/bundle" ]; then
                            bundle config set deployment 'true'
                          fi
                          bundle config set gemfile "$PARAM_GEMFILE"
                          bundle config set path "$PARAM_PATH"

                          if [ -d "$HOME/.rvm/usr/ssl" ]; then
                            echo "Detected rvm ssl version. Configuring bundle package with openssl dir $HOME/.rvm/usr."
                            bundle config set build.openssl --with-openssl-dir="$HOME/.rvm/usr"
                          fi
                        fi

                        if [ "$PARAM_CLEAN_BUNDLE" = 1 ]; then
                          bundle check || (bundle install && bundle clean --force)
                        else
                          bundle check || bundle install
                        fi
                    environment:
                        PARAM_CLEAN_BUNDLE: << parameters.clean-bundle >>
                        PARAM_GEMFILE: << parameters.gemfile >>
                        PARAM_PATH: << parameters.path >>
                    name: Bundle Install <<^parameters.with-cache>>(No Cache)<</parameters.with-cache>>
                    working_directory: <<parameters.app-dir>>
                - when:
                    condition: << parameters.with-cache >>
                    steps:
                        - save_cache:
                            key: << parameters.key >>-{{ arch }}-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "/tmp/ruby-project-lockfile"  }}
                            paths:
                                - <<parameters.app-dir>>/<< parameters.path >>
        rspec-test:
            description: Test with RSpec. You have to add `gem 'rspec_junit_formatter'` to your Gemfile. Enable parallelism on CircleCI for faster testing.
            parameters:
                app-dir:
                    default: .
                    description: |
                        Path to the directory containing your Gemfile file. Not needed if Gemfile lives in the root.
                    type: string
                include:
                    default: spec/**/*_spec.rb
                    description: |
                        Glob to define where your test files are kept within your repository. Should multiple globs be required, they must be passed in a comma separated string (e.g.: "spec/**/*_spec.rb,spec2/**/*_spec.rb").
                    type: string
                label:
                    default: RSpec Tests
                    description: Task label
                    type: string
                no_output_timeout:
                    default: 10m
                    description: |
                        Allows you to specify the no_output_timeout for the rspec test. Defaults to 10m.
                    type: string
                order:
                    default: ""
                    description: |
                        Use the order parameter to tell RSpec how to order the files, groups, and examples. Available options can be found at: https://relishapp.com/rspec/rspec-core/docs/command-line/order
                    type: string
                out-path:
                    default: /tmp/test-results/rspec
                    description: Where to save the rspec.xml file. Will automatically be saved to test_results and artifacts on CircleCI.
                    type: string
                rerun-fail:
                    default: true
                    description: |
                        Enabling the option uses circleci tests run command and allows the "Rerun failed tests only" feature. 
                        This feature helps optimize test execution by re-running only the failed tests from previous test run data.
                        More information can be found at: https://circleci.com/docs/rerun-failed-tests-only
                    type: boolean
                tag:
                    default: ""
                    description: |
                        Use the tag parameter to tell RSpec to run only examples with (or without) a specified tag. Available options can be found at: https://relishapp.com/rspec/rspec-core/v/3-11/docs/command-line/tag-option
                    type: string
            steps:
                - run:
                    command: |
                        #!/usr/bin/env bash

                        if [ "$CIRCLE_NODE_TOTAL" -eq 1 ]; then
                        printf '%s\n' "Your job parallelism is set to 1."
                        printf '%s\n' "The split test by timings requires at least 2 nodes to generate historical timing data."
                        printf '%s\n' "Consider increasing your job parallelism to 2 or more."
                        printf '%s\n' "See https://circleci.com/docs/2.0/parallelism-faster-jobs/#using-the-circleci-cli-to-split-tests for more information."
                        fi

                        # Disable bash glob expansion
                        # Without this, the glob parameter will be expanded before the split command is run
                        set -o noglob

                        if ! mkdir -p "$PARAM_OUT_PATH"; then
                        printf '%s\n' "Failed to create output directory: \"$PARAM_OUT_PATH\""
                        exit 1
                        fi

                        # store it as an array in the globs variable
                        read -ra globs \<<< "$PARAM_INCLUDE"

                        prepare_split_files() {
                        # Backup IFS
                        readonly old_ifs="$IFS"

                        # Split globs per comma and run the CLI split command
                        IFS=","
                        split_files=$(circleci tests glob "${globs[@]}" | circleci tests split --split-by=timings)

                        # Convert list of test files to array
                        # This is necessary because the split command returns a list of files separated by newline
                        while IFS= read -r line; do test_files+=("$line"); done \<<< "$split_files"

                        # Rollback IFS
                        IFS="$old_ifs"
                        }

                        args=()

                        if [ -n "$PARAM_ORDER" ]; then
                        args+=(--order "$PARAM_ORDER")
                        fi

                        if [ -n "$PARAM_TAG" ]; then
                        args+=(--tag "$PARAM_TAG")
                        fi

                        # Parse array of test files to string separated by single space and run tests
                        # Leaving set -x here because it's useful for debugging what files are being tested
                        set -x
                        if [ "$PARAM_RERUN_FAIL" = 1 ]; then
                            circleci tests glob "${globs[@]}" | circleci tests run --command "xargs bundle exec rspec --profile 10 --format RspecJunitFormatter --out \"$PARAM_OUT_PATH\"/results.xml --format progress ${args[*]}" --verbose --split-by=timings
                        else
                            prepare_split_files
                            bundle exec rspec "${test_files[@]}" --profile 10 --format RspecJunitFormatter --out "$PARAM_OUT_PATH"/results.xml --format progress "${args[@]}"
                        fi
                        set +x
                    environment:
                        PARAM_INCLUDE: <<parameters.include>>
                        PARAM_ORDER: <<parameters.order>>
                        PARAM_OUT_PATH: <<parameters.out-path>>
                        PARAM_TAG: <<parameters.tag>>
                        PARAM_RERUN_FAIL: <<parameters.rerun-fail>>
                    name: <<parameters.label>>
                    no_output_timeout: <<parameters.no_output_timeout>>
                    working_directory: <<parameters.app-dir>>
                - store_test_results:
                    path: <<parameters.out-path>>
                - store_artifacts:
                    destination: test-results
                    path: <<parameters.out-path>>

jobs:
  rerun-true:
    docker:
      - image: cimg/ruby:2.7.4-browsers
    parallelism: 4
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check chrome install
      - ruby/install-deps:
          key: gem-2
      - ruby/rspec-test:
          include: "spec/**/*_spec.rb"
      - store_test_results:
          path: ~/rspec/rspec.xml

  rerun-false:
    docker:
      - image: cimg/ruby:2.7.4-browsers
    parallelism: 4
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check chrome install
      - ruby/install-deps:
          key: gem-2
      - ruby/rspec-test:
          include: "spec/**/*_spec.rb"
          rerun-fail: false
      - store_test_results:
          path: ~/rspec/rspec.xml
workflows:
  test_build:
    jobs:
      - rerun-true
      - rerun-false
